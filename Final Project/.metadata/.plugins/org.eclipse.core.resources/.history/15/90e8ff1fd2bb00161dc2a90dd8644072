'''
Created on Nov 3, 2016

@author: branaugh
'''

import libtcodpy as libtcod
import textwrap
import time
from __builtin__ import True

#window size
screenWidth = 80
screenHeight = 45

#dungeon size
dungeonWidth = 80
dungeonHeight = 35

#bottom panel size
barWidth = 20
panelHeight = 10
panelY = screenHeight - panelHeight

#message size
messageX = barWidth + 3
messageWidth = screenWidth - barWidth - 17
messageHeight = panelHeight - 3

#sample button
startButtonX = 68
endButtonX = 70
startButtonY = 36
endButtonY =38

#fog of war
fovAlg = 0
fovLightWalls = True
torchRadius = 10

maxRoomMonsters = 3

#room parameters
roomMaxSize = 15
roomMinSize = 10
maxRooms = 10

limitFPS = 15

wall_tile = 256 
floor_tile = 257
player_tile = 258
orc_tile = 259
troll_tile = 260
scroll_tile = 261
healingpotion_tile = 262
sword_tile = 263
shield_tile = 264
stairsdown_tile = 265
dagger_tile = 266


class Tile:
    def __init__(self, blocked, block_sight = None):
        self.blocked = blocked
        self.explored = False
        if block_sight is None: block_sight = blocked
        self.block_sight = block_sight
    
class Rect:
    def __init__(self,x,y,w,h):
        self.x1 = x
        self.y1 = y
        self.x2 = x + w
        self.y2 = y + h
    
    def center(self):
        center_x = (self.x1 + self.x2) / 2
        center_y = (self.y1 + self.y2) / 2
        return (center_x, center_y)
    
    def intersect(self,other):
        return(self.x1 <= other.x2 and self.x2 >= other.x1 and self.y1 <= other.y2 and self.y2 >= other.y1)
        
class Object:
    def __init__(self,x,y,char,name,color,time,attacking=False,blocks=False):
        self.x = x
        self.y = y
        self.char = char
        self.name = name
        self.color = color
        self.attacking = attacking
        self.time = time
        self.blocks = blocks
        
    def move(self, dx, dy):
        if not is_blocked(self.x+dx,self.y+dy):
            self.x = self.x + dx
            self.y = self.y + dy
            
    def draw(self):
        if libtcod.map_is_in_fov(fovMap,self.x,self.y):
            libtcod.console_set_default_foreground(con,self.color)
            libtcod.console_put_char(con,self.x,self.y,self.char,libtcod.BKGND_NONE)
        
    def clear(self):
        libtcod.console_put_char(con,self.x,self.y,' ',libtcod.BKGND_NONE)
        
def load_customfont():
    a = 256
    for y in range(5,6):
        libtcod.console_map_ascii_codes_to_font(a,32,0,y)
        a = a + 32
        
def is_blocked(x,y):  
    if dungeon[x][y].blocked:
        return True
    for object in objects:
        if object.blocks and object.x == x and object.y == y:
            return True
    return False   
        
def createRoom(room):
    global dungeon
    for x in range(room.x1 + 1, room.x2):
        for y in range(room.y1 + 1, room.y2):
            dungeon[x][y].blocked = False
            dungeon[x][y].block_sight = False
        
def createHorizontalTunnel(x1,x2,y):
    global dungeon
    for x in range(min(x1,x2), max(x1,x2) + 1):
        dungeon[x][y].blocked = False
        dungeon[x][y].block_sight = False
        dungeon[x+1][y+1].blocked = False
        dungeon[x+1][y+1].block_sight = False
        
def createVerticalTunnel(y1,y2,x):
    global dungeon
    for y in range(min(y1,y2), max(y1,y2) + 1):
        dungeon[x][y].blocked = False
        dungeon[x][y].block_sight = False
        dungeon[x+1][y+1].blocked = False
        dungeon[x+1][y+1].block_sight = False
        
def makeMap():
    global dungeon, player
    dungeon = [[Tile(True) for y in range (dungeonHeight)] for x in range(dungeonWidth)]
    
    #dungeon generation algorithm
    rooms = []
    num_rooms = 0
    
    for r in range(maxRooms):
        w = libtcod.random_get_int(0,roomMinSize,roomMaxSize)
        h = libtcod.random_get_int(0,roomMinSize,roomMaxSize)
        x = libtcod.random_get_int(0,0,dungeonWidth-w-1)
        y = libtcod.random_get_int(0,0,dungeonHeight-h-1)
        
        new_room = Rect(x,y,w,h)
        
        failed = False
        for other_room in rooms:
            if new_room.intersect(other_room):
                failed = True
                break
        if not failed:
            createRoom(new_room)
            (new_x,new_y) = new_room.center()
            
            if num_rooms == 0:
                player.x = new_x
                player.y = new_y
            else:
                (prev_x,prev_y) = rooms[num_rooms-1].center()
                if libtcod.random_get_int(0,0,1)==1:
                    createHorizontalTunnel(prev_x,new_x,prev_y)
                    createVerticalTunnel(prev_y,new_y,new_x)
                else:
                    createVerticalTunnel(prev_y,new_y,prev_x)
                    createHorizontalTunnel(prev_x,new_x,new_y)
            place_objects(new_room)
            rooms.append(new_room)
            num_rooms = num_rooms + 1
  
def place_objects(room):
    numMonsters = libtcod.random_get_int(0,0,maxRoomMonsters)
    
    for i in range(numMonsters):
        x = libtcod.random_get_int(0,room.x1,room.x2)
        y = libtcod.random_get_int(0,room.y1,room.y2)
        
        if not is_blocked(x,y):
            if libtcod.random_get_int(0,0,100) < 80:
                monster = Object(x,y,orc_tile,'orc',time,False,libtcod.white,blocks=True)
            else:
                monster = Object(x,y,troll_tile,'troll',time,False,libtcod.white,blocks=True)
            objects.append(monster)
    
def render_bar(x,y,totalWidth,name,value,maximum,barColor,backColor):
    barWidth = int(float(value)/maximum*totalWidth)
    
    libtcod.console_set_default_background(panel,backColor)
    libtcod.console_rect(panel,x,y,totalWidth,1,False,libtcod.BKGND_SCREEN)
    
    libtcod.console_set_default_background(panel,barColor)
    if barWidth > 0:
        libtcod.console_rect(panel,x,y,barWidth,1,False,libtcod.BKGND_SCREEN)
        
    libtcod.console_set_default_foreground(panel, libtcod.white)
    libtcod.console_print_ex(panel,x+totalWidth/2,y, libtcod.BKGND_NONE, libtcod.CENTER,name + ': ' + str(value) + '/' + str(maximum))
    

def renderAll():
    global dungeon
    global fovRecompute, fovMap
    
    if fovRecompute:
        fovRecompute = False
        libtcod.map_compute_fov(fovMap, player.x, player.y, torchRadius, fovLightWalls, fovAlg)
    
    for y in range(dungeonHeight):
        for x in range(dungeonWidth):
            visible = libtcod.map_is_in_fov(fovMap, x, y)
            wall = dungeon[x][y].block_sight
            if not visible:
                if dungeon[x][y].explored:
                    if wall:
                        libtcod.console_set_char_background(con,x,y,libtcod.Color(0,0,100), libtcod.BKGND_SET) 
                    else :
                        libtcod.console_set_char_background(con,x,y,libtcod.Color(50,50,150), libtcod.BKGND_SET)
            else:
                if wall:
                    libtcod.console_put_char_ex(con,x,y,wall_tile,libtcod.grey,libtcod.black)
                else:
                    libtcod.console_put_char_ex(con,x,y,floor_tile,libtcod.grey,libtcod.black)
                dungeon[x][y].explored = True
            
    for object in objects:
        object.draw()
        
    libtcod.console_blit(con,0,0,screenWidth,screenHeight,0,0,0)
    
    libtcod.console_set_default_background(panel,libtcod.black)
    libtcod.console_clear(panel)
    
    libtcod.console_set_default_background(panel,libtcod.dark_gray)
    libtcod.console_rect(panel,(messageX-1),1,(screenWidth/2+5),7,False,libtcod.BKGND_SCREEN)
    libtcod.console_blit(panel,0,0,screenWidth,panelHeight,0,0,panelY)
    
    #sample button
    #libtcod.console_set_default_background(panel,libtcod.dark_gray)
    #libtcod.console_rect(panel,(screenWidth-12),1,(screenWidth/2-37),2,False,libtcod.BKGND_SCREEN)
    #libtcod.console_blit(panel,0,0,screenWidth,panelHeight,0,0,panelY)

    
    y = 1
    for (line,color) in allMessages:
        libtcod.console_set_default_foreground(panel,color)
        libtcod.console_print_ex(panel, messageX, y, libtcod.BKGND_NONE, libtcod.LEFT, line)
        y = y + 1
    
    render_bar(1,1,barWidth,'HP',75,100,libtcod.light_red,libtcod.darker_red)
    render_bar(1,3,barWidth,'Mana',85,100,libtcod.light_blue,libtcod.darker_blue)
    render_bar(1,5,barWidth,'Exp',100,1000,libtcod.light_green,libtcod.darker_green)

    libtcod.console_blit(panel,0,0,screenWidth,panelHeight,0,0,panelY)
   
def message(newMessage, color = libtcod.white):
    newMessageLines = textwrap.wrap(newMessage, messageWidth)  
    
    for line in newMessageLines:
        if len(allMessages) == messageHeight:
            del allMessages[0]
        allMessages.append((line,color))
     
def player_select_or_attack(mousex,mousey):
    global mouse
    
    x = mousex
    y = mousey
    
    target = None
    for object in objects:
        if object.x == x and object.y == y:
            target = object
            break
        
    if target is not None:
        if (target.x == player.x+1 and target.y == player.y) or (target.x == player.x-1 and target.y == player.y) or (target.x == player.x and target.y == player.y+1) or (target.x == player.x and target.y == player.y-1):
            message("You attack the monster!", libtcod.orange)
        else:
            message("You are not close enough to attack that monster!", libtcod.orange)

def handleKeys():
    global playerx, playery, key, mouse, fovRecompute
        
    #Add fullscreen support here?
    
    #key handling
    if mouse.lbutton_pressed:
        player_select_or_attack(mouse.cx,mouse.cy)
    
    if key.vk == libtcod.KEY_ESCAPE: #exit game
        return 'exit'

    else: #arrow keys
        if game_state == 'playing':
            if libtcod.console_is_key_pressed(libtcod.KEY_UP):
                player.move(0,-1)
                fovRecompute = True
            elif libtcod.console_is_key_pressed(libtcod.KEY_DOWN):
                player.move(0,1)
                fovRecompute = True
            elif libtcod.console_is_key_pressed(libtcod.KEY_LEFT):
                player.move(-1,0)
                fovRecompute = True
            elif libtcod.console_is_key_pressed(libtcod.KEY_RIGHT):
                player.move(1,0)
                fovRecompute = True

libtcod.console_set_custom_font('Tiles.png',libtcod.FONT_TYPE_GREYSCALE | libtcod.FONT_LAYOUT_TCOD, 32, 10)
libtcod.console_init_root(screenWidth, screenHeight, 'Branaugh/Adam Roguelike', False)
libtcod.sys_set_fps(limitFPS)
con = libtcod.console_new(screenWidth,screenHeight)
panel = libtcod.console_new(screenWidth, panelHeight)

load_customfont()
player = Object(screenWidth/2, screenHeight/2, player_tile, 'player', time, False, libtcod.white, blocks=True)
objects = [player]
makeMap()

fovMap = libtcod.map_new(dungeonWidth, dungeonHeight)
for y in range(dungeonHeight):
    for x in range(dungeonWidth):
        libtcod.map_set_properties(fovMap, x, y, not dungeon[x][y].block_sight, not dungeon[x][y].blocked)
        
fovRecompute = True
game_state = 'playing'

allMessages = []
message('Welcome! This is a sample printed message.', libtcod.green)

mouse = libtcod.Mouse()
key = libtcod.Key()

attacking = False

while not libtcod.console_is_window_closed():
    libtcod.sys_check_for_event(libtcod.EVENT_KEY_PRESS|libtcod.EVENT_MOUSE,key,mouse)
    renderAll()
    libtcod.console_flush()
    
    for object in objects:
        object.clear()
        
    if handleKeys() == 'exit': #escape key pressed
        break
    
    if game_state == 'playing':
        for object in objects:
            if object != 'player':
                if (object.x == player.x+1 and object.y == player.y) or (object.x == player.x-1 and object.y == player.y) or (object.x == player.x and object.y == player.y+1) or (object.x == player.x and object.y == player.y-1):
                    attacking = True
                    object.time.time()
                    if object.time % 5 == 0:
                        message("The " + object.name + " growls!", libtcod.red)
                else:
                    if attacking == True:
                        object.time.time()
        