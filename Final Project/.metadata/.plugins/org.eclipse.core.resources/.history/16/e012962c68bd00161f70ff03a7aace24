'''
Created on Nov 3, 2016

@author: branaugh
'''

import libtcodpy as libtcod
import textwrap
import time
import math

#window size
screenWidth = 80
screenHeight = 43

#dungeon size
dungeonWidth = 60
dungeonHeight = 33

#bottom panel size
barWidth = 20
panelHeight = 10
panelY = screenHeight - panelHeight

#message size
messageX = barWidth + 3
messageWidth = screenWidth - barWidth - 17
messageHeight = panelHeight - 3

inventoryWidth = 25

#sample button
startButtonX = 68
endButtonX = 70
startButtonY = 36
endButtonY =38

#fog of war
fovAlg = 0
fovLightWalls = True
torchRadius = 10

maxRoomMonsters = 3
maxRoomItems = 1

#room parameters
roomMaxSize = 15
roomMinSize = 10
maxRooms = 10

limitFPS = 15

wall_tile = 256 
floor_tile = 257
player_tile = 258
orc_tile = 259
troll_tile = 260
scroll_tile = 261
healingpotion_tile = 262
sword_tile = 263
shield_tile = 264
stairsdown_tile = 265
dagger_tile = 266

class Tile:
    def __init__(self, blocked, block_sight = None):
        self.blocked = blocked
        self.explored = False
        if block_sight is None: block_sight = blocked
        self.block_sight = block_sight
    
class Rect:
    def __init__(self,x,y,w,h):
        self.x1 = x
        self.y1 = y
        self.x2 = x + w
        self.y2 = y + h
    
    def center(self):
        center_x = (self.x1 + self.x2) / 2
        center_y = (self.y1 + self.y2) / 2
        return (center_x, center_y)
    
    def intersect(self,other):
        return(self.x1 <= other.x2 and self.x2 >= other.x1 and self.y1 <= other.y2 and self.y2 >= other.y1)
        
class Object:
    def __init__(self,x,y,char,name,color,timerStart,speed,moveSpeed,attacking=False,blocks=False,fighter=None, ai=None, item=None):
        self.x = x
        self.y = y
        self.char = char
        self.name = name
        self.color = color
        self.timerStart = timerStart
        self.speed = speed
        self.moveSpeed = moveSpeed
        self.wait = 0
        self.attacking = attacking
        self.blocks = blocks
        self.fighter = fighter
        if self.fighter:
            self.fighter.owner = self
            
        self.ai = ai
        if self.ai:
            self.ai.owner = self
            
        self.item = item
        if self.item:
            self.item.owner = self
        
    def move(self, dx, dy):
        if not is_blocked(self.x+dx,self.y+dy):
            self.x = self.x + dx
            self.y = self.y + dy
            self.wait = self.moveSpeed
            
    def move_towards(self,targetX,targetY):
        dx = targetX - self.x
        dy = targetY - self.y
        distance = math.sqrt(dx**2 + dy**2)
        dx = int(round(dx/distance))
        dy = int(round(dy/distance))
        self.move(dx,dy)
        
    def pathing(self,target):
        fov = libtcod.map_new(dungeonWidth,dungeonHeight)
        for height in range(dungeonHeight):
            for width in range(dungeonWidth):
                libtcod.map_set_properties(fov,width,height,not dungeon[width][height].block_sight,not dungeon[width][height].blocked)
                
        for object in objects:
            if object.blocks and object != self and object != target:
                libtcod.map_set_properties(fov,object.x,object.y,True,False)
                
        path = libtcod.path_new_using_map(fov, 1.41)
        libtcod.path_compute(path,self.x,self.y,target.x,target.y)
        
        if not libtcod.path_is_empty(path) and libtcod.path_size(path) < 25:
            x, y = libtcod.path_walk(path, True)
            if x or y:
                self.x = x
                self.y = y
                self.wait = self.moveSpeed

        else:
            self.move_towards(target.x,target.y)
        
        libtcod.path_delete(path)
        
    def distance_to(self,other):
        dx = other.x - self.x
        dy = other.y - self.y
        return math.sqrt(dx ** 2 + dy ** 2)
    
    def send_to_back(self):
        global objects
        objects.remove(self)
        objects.insert(0,self)
           
    def draw(self):
        if libtcod.map_is_in_fov(fovMap,self.x,self.y):
            libtcod.console_set_default_foreground(con,self.color)
            libtcod.console_put_char(con,self.x,self.y,self.char,libtcod.BKGND_NONE)
        
    def clear(self):
        libtcod.console_put_char(con,self.x,self.y,' ',libtcod.BKGND_NONE)
    
class Fighter:
    def __init__(self,hp,defense,power,death_function=None):
        self.max_hp = hp
        self.hp = hp
        self.defense = defense
        self.power = power
        self.death_function = death_function
    
    def attack(self,target):
        damage = self.power-target.fighter.defense
        
        if damage > 0:
            message(self.owner.name.capitalize() + ' attacks ' + target.name + ' for ' + str(damage) + ' damage.', libtcod.red)
            target.fighter.take_damage(damage)
        else:
            message(self.owner.name.capitalize() + ' attacks ' + target.name + ', but it has no effect!', libtcod.red)
        
    def take_damage(self,damage):
        if damage > 0:
            self.hp -= damage
            if self.hp <= 0:
                function = self.death_function
                if function is not None:
                    function(self.owner)
        
class BasicMonster:
    def take_turn(self):
        timer = int(time.time())
        monster = self.owner
        if libtcod.map_is_in_fov(fovMap,monster.x,monster.y):
            if monster.distance_to(player) >= 2:
                monster.pathing(player)
            elif player.fighter.hp > 0:
                if monster.attacking == False:
                    monster.timerStart = timer
                    monster.fighter.attack(player)                
                    monster.attacking = True
                else:
                    if timer == monster.timerStart + monster.speed:
                        monster.timerStart = timer
                        monster.fighter.attack(player)                    
            else:
                if monster.attacking == True:
                    monster.attacking = False
                    
class Item:
    def __init__(self,use_function=None):
        self.use_function = use_function
        
    def pick_up(self):
        if len(inventory) >= 26:
            message('Your inventory is too full to pick up that ' + self.owner.name + '.', libtcod.orange)
        else:
            inventory.append(self.owner)
            objects.remove(self.owner)
            message('You picked up a ' + self.owner.name + '.', libtcod.green)                
                    
def load_customfont():
    a = 256
    for y in range(5,6):
        libtcod.console_map_ascii_codes_to_font(a,32,0,y)
        a = a + 32
        
def is_blocked(x,y):  
    if dungeon[x][y].blocked:
        return True
    for object in objects:
        if object.blocks and object.x == x and object.y == y:
            return True
    return False   
        
def createRoom(room):
    global dungeon
    for x in range(room.x1 + 1, room.x2):
        for y in range(room.y1 + 1, room.y2):
            dungeon[x][y].blocked = False
            dungeon[x][y].block_sight = False
        
def createHorizontalTunnel(x1,x2,y):
    global dungeon
    for x in range(min(x1,x2), max(x1,x2) + 1):
        dungeon[x][y].blocked = False
        dungeon[x][y].block_sight = False
        dungeon[x+1][y+1].blocked = False
        dungeon[x+1][y+1].block_sight = False
        
def createVerticalTunnel(y1,y2,x):
    global dungeon
    for y in range(min(y1,y2), max(y1,y2) + 1):
        dungeon[x][y].blocked = False
        dungeon[x][y].block_sight = False
        dungeon[x+1][y+1].blocked = False
        dungeon[x+1][y+1].block_sight = False
        
def makeMap():
    global dungeon, player
    dungeon = [[Tile(True) for y in range (dungeonHeight)] for x in range(dungeonWidth)]
    
    #dungeon generation algorithm
    rooms = []
    num_rooms = 0
    
    for r in range(maxRooms):
        w = libtcod.random_get_int(0,roomMinSize,roomMaxSize)
        h = libtcod.random_get_int(0,roomMinSize,roomMaxSize)
        x = libtcod.random_get_int(0,0,dungeonWidth-w-1)
        y = libtcod.random_get_int(0,0,dungeonHeight-h-1)
        
        new_room = Rect(x,y,w,h)
        
        failed = False
        for other_room in rooms:
            if new_room.intersect(other_room):
                failed = True
                break
        if not failed:
            createRoom(new_room)
            (new_x,new_y) = new_room.center()
            
            if num_rooms == 0:
                player.x = new_x
                player.y = new_y
            else:
                (prev_x,prev_y) = rooms[num_rooms-1].center()
                if libtcod.random_get_int(0,0,1)==1:
                    createHorizontalTunnel(prev_x,new_x,prev_y)
                    createVerticalTunnel(prev_y,new_y,new_x)
                else:
                    createVerticalTunnel(prev_y,new_y,prev_x)
                    createHorizontalTunnel(prev_x,new_x,new_y)
            place_objects(new_room)
            rooms.append(new_room)
            num_rooms = num_rooms + 1
  
def place_objects(room):
    numMonsters = libtcod.random_get_int(0,0,maxRoomMonsters)
    
    for i in range(numMonsters):
        x = libtcod.random_get_int(0,room.x1+1,room.x2-1)
        y = libtcod.random_get_int(0,room.y1+1,room.y2-1)
        
        if not is_blocked(x,y):
            if libtcod.random_get_int(0,0,100) < 80:
                fighter_component = Fighter(hp=10,defense=0,power=3,death_function=monster_death)
                ai_component = BasicMonster()
                monster = Object(x, y, orc_tile,'orc', libtcod.white, 0, 5, 2, False, blocks=True, fighter = fighter_component, ai = ai_component)
            else:
                fighter_component = Fighter(hp=16,defense=1,power=4,death_function=monster_death)
                ai_component = BasicMonster()
                monster = Object(x, y, troll_tile,'troll', libtcod.white, 0, 7, 2, False, blocks=True, fighter = fighter_component, ai = ai_component)
            objects.append(monster)
            
    numItems = libtcod.random_get_int(0,0,maxRoomItems)
    for i in range(numItems):
        x = libtcod.random_get_int(0,room.x1+1,room.x2-1)
        y = libtcod.random_get_int(0,room.y1+1,room.y2-1)
        if not is_blocked(x,y):
            item_component = Item()
            item = Object(x,y,healingpotion_tile,'healing potion', libtcod.white, 0, 0, 0, item=item_component)
            objects.append(item)
            item.send_to_back()
    
def render_bar(x,y,totalWidth,name,value,maximum,barColor,backColor):
    barWidth = int(float(value)/maximum*totalWidth)
    
    libtcod.console_set_default_background(panel,backColor)
    libtcod.console_rect(panel,x,y,totalWidth,1,False,libtcod.BKGND_SCREEN)
    
    libtcod.console_set_default_background(panel,barColor)
    if barWidth > 0:
        libtcod.console_rect(panel,x,y,barWidth,1,False,libtcod.BKGND_SCREEN)
        
    libtcod.console_set_default_foreground(panel, libtcod.white)
    libtcod.console_print_ex(panel,x+totalWidth/2,y, libtcod.BKGND_NONE, libtcod.CENTER,name + ': ' + str(value) + '/' + str(maximum))
  
def get_names_under_mouse():
    global mouse
    (x,y) = (mouse.cx,mouse.cy)
    
    names = [object.name for object in objects if object.x == x and object.y == y and libtcod.map_is_in_fov(fovMap,object.x,object.y)]
    names = ' , '.join(names)
    return names.capitalize()    

def renderAll():
    global dungeon
    global fovRecompute, fovMap
    global prevTime
    
    if fovRecompute:
        fovRecompute = False
        libtcod.map_compute_fov(fovMap, player.x, player.y, torchRadius, fovLightWalls, fovAlg)
    
    for y in range(dungeonHeight):
        for x in range(dungeonWidth):
            visible = libtcod.map_is_in_fov(fovMap, x, y)
            wall = dungeon[x][y].block_sight
            if not visible:
                if dungeon[x][y].explored:
                    if wall:
                        libtcod.console_set_char_background(con,x,y,libtcod.Color(0,0,100), libtcod.BKGND_SET) 
                    else:
                        libtcod.console_set_char_background(con,x,y,libtcod.Color(0,0,0), libtcod.BKGND_SET)
            else:
                if wall:
                    libtcod.console_put_char_ex(con,x,y,wall_tile,libtcod.grey,libtcod.black)
                else:
                    libtcod.console_put_char_ex(con,x,y,floor_tile,libtcod.grey,libtcod.black)
                dungeon[x][y].explored = True
            
    for object in objects:
        object.draw()
        
    libtcod.console_blit(con,0,0,screenWidth,screenHeight,0,0,0)
    
    libtcod.console_set_default_background(panel,libtcod.black)
    libtcod.console_clear(panel)
    
    libtcod.console_set_default_background(panel,libtcod.dark_gray)
    libtcod.console_rect(panel,(messageX-1),1,(screenWidth/2+5),7,False,libtcod.BKGND_SCREEN)
    libtcod.console_blit(panel,0,0,screenWidth,panelHeight,0,0,panelY)
    
    #inventory button
    libtcod.console_set_default_background(panel,libtcod.dark_gray)
    libtcod.console_rect(panel,(screenWidth-12),1,(screenWidth/2-37),2,False,libtcod.BKGND_SCREEN)
    libtcod.console_blit(panel,0,0,screenWidth,panelHeight,0,0,panelY)

    
    y = 1
    for (line,color) in allMessages:
        libtcod.console_set_default_foreground(panel,color)
        libtcod.console_print_ex(panel, messageX, y, libtcod.BKGND_NONE, libtcod.LEFT, line)
        y = y + 1
    
    render_bar(1,1,barWidth,'HP',player.fighter.hp,player.fighter.max_hp,libtcod.light_red,libtcod.darker_red)
    render_bar(1,5,barWidth,'Mana',85,100,libtcod.light_blue,libtcod.darker_blue)
    render_bar(1,7,barWidth,'Exp',100,1000,libtcod.light_green,libtcod.darker_green)
    for i in range(1):
        currentTime = abs(int(prevTime+i-time.time()))
        if currentTime > 1:
            currentTime = 1 
        render_bar(1,3,barWidth,'Stamina',currentTime,1, libtcod.light_fuchsia, libtcod.darker_fuchsia)

    libtcod.console_set_default_foreground(panel,libtcod.light_gray)
    libtcod.console_print_ex(panel,1,9,libtcod.BKGND_NONE, libtcod.LEFT,get_names_under_mouse())

    libtcod.console_blit(panel,0,0,screenWidth,panelHeight,0,0,panelY)
   
def message(newMessage, color = libtcod.white):
    newMessageLines = textwrap.wrap(newMessage, messageWidth)  
    
    for line in newMessageLines:
        if len(allMessages) == messageHeight:
            del allMessages[0]
        allMessages.append((line,color))
     
     
def player_select_or_attack(mousex,mousey,lastTime):
    global mouse
    global cantAttack
    timer = int(time.time())
    
    x = mousex
    y = mousey
    
    for object in objects:
        if (x >= 68 and x <= 70) and (y >= 34 and y <= 36):
            chosenItem = inventory_menu('Press the key next to an item to use it, or any other to cancel.\n')
            if chosenItem is not None:
                chosenItem.use()
            break
    
    target = None
    for object in objects:
        if object.x == x and object.y == y:
            if object.fighter is not None:
                target = object
                break
        
    if target is not None:
        if (target.x == player.x+1 and target.y == player.y) or (target.x == player.x-1 and target.y == player.y) or (target.x == player.x and target.y == player.y+1) or (target.x == player.x and target.y == player.y-1) or (target.x == player.x+1 and target.y == player.y+1) or (target.x == player.x-1 and target.y == player.y+1) or (target.x == player.x+1 and target.y == player.y-1) or (target.x == player.x-1 and target.y == player.y-1):
            if (timer >= lastTime+1):
                cantAttack = False
                player.fighter.attack(target)
            else:
                message("You can't attack yet!", libtcod.orange)

        else:
            message("You are not close enough to attack that monster!", libtcod.orange)

def menu(header,options,width):
    if len(options) > 26: raise ValueError('Cannot have a menu with more than 26 options.')
    
    headerHeight = libtcod.console_get_height_rect(con,0,0,width,screenHeight,header)
    height = len(options) + headerHeight
    
    window = libtcod.console_new(width,height)
    libtcod.console_set_default_background(window,libtcod.gray)
    libtcod.console_rect(window,0,0,width,height,False,libtcod.BKGND_SCREEN)
    
    libtcod.console_set_default_foreground(window,libtcod.violet)
    libtcod.console_print_rect_ex(window,0,0,width,height,libtcod.BKGND_NONE,libtcod.LEFT,header)
    
    y = headerHeight
    x = 0
    letterIndex = ord('a')
    for optionImage in options:
        libtcod.console_put_char(window,x,y,optionImage,libtcod.BKGND_SCREEN)
        x = x + 2
        if x == 24:
            x = 0
            y = y + 1
        letterIndex = letterIndex + 1
        
    libtcod.console_blit(window,0,0,width,height,0,61,1,1.0,7.0)
    
    libtcod.console_flush()
    key = libtcod.console_wait_for_keypress(True)
    
    index = key.c - ord('a')
    if index >= 0 and index < len(options): 
        return index
    return None
        
def inventory_menu(header):
    options = [item.char for item in inventory] 
    index = menu(header,options,inventoryWidth)
    if index is None or len(inventory) == 0: 
        return None
    return inventory[index].item

def handleKeys():
    global playerx, playery, key, mouse, fovRecompute
    global prevTime
    global cantAttack
        
    #Add fullscreen support here?
    
    #key handling
    if mouse.lbutton_pressed:
        if game_state == 'playing':
            player_select_or_attack(mouse.cx,mouse.cy,prevTime)
            if cantAttack == False:
                prevTime = time.time()
                cantAttack = True
    
    if key.vk == libtcod.KEY_ESCAPE: #exit game
        return 'exit'

    else: #other keys
        key_char = chr(key.c)
        if game_state == 'playing':
            if key.vk == libtcod.KEY_UP:
                player.move(0,-1)
                fovRecompute = True
                for object in objects:
                    if object.x == player.x and object.y == player.y and object.item:
                        object.item.pick_up()
                        break
            elif key.vk == libtcod.KEY_DOWN:
                player.move(0,1)
                fovRecompute = True
                for object in objects:
                    if object.x == player.x and object.y == player.y and object.item:
                        object.item.pick_up()
                        break
            elif key.vk == libtcod.KEY_LEFT:
                player.move(-1,0)
                fovRecompute = True
                for object in objects:
                    if object.x == player.x and object.y == player.y and object.item:
                        object.item.pick_up()
                        break
            elif key.vk == libtcod.KEY_RIGHT:
                player.move(1,0)
                fovRecompute = True
                for object in objects:
                    if object.x == player.x and object.y == player.y and object.item:
                        object.item.pick_up()
                        break
            elif key_char == 'w':
                player.move(0,-1)
                fovRecompute = True
                for object in objects:
                    if object.x == player.x and object.y == player.y and object.item:
                        object.item.pick_up()
                        break
            elif key_char == 's':
                player.move(0,1)
                fovRecompute = True
                for object in objects:
                    if object.x == player.x and object.y == player.y and object.item:
                        object.item.pick_up()
                        break
            elif key_char == 'a':
                player.move(-1,0)
                fovRecompute = True
                for object in objects:
                    if object.x == player.x and object.y == player.y and object.item:
                        object.item.pick_up()
                        break
            elif key_char == 'd':
                player.move(1,0)
                fovRecompute = True
                for object in objects:
                    if object.x == player.x and object.y == player.y and object.item:
                        object.item.pick_up()
                        break

        

def player_death(player):
    global game_state
    message("You died.", libtcod.red)
    game_state = 'dead'
    
def monster_death(monster):
    message(monster.name.capitalize() + ' is dead!', libtcod.green)
    objects.remove(monster)

libtcod.console_set_custom_font('Tiles.png',libtcod.FONT_TYPE_GREYSCALE | libtcod.FONT_LAYOUT_TCOD, 32, 10)
libtcod.console_init_root(screenWidth, screenHeight, 'Branaugh/Adam Roguelike', False)
libtcod.sys_set_fps(limitFPS)
con = libtcod.console_new(screenWidth,screenHeight)
panel = libtcod.console_new(screenWidth, panelHeight)

load_customfont()
fighter_component = Fighter(hp=100,defense=2,power=5,death_function=player_death)
player = Object(screenWidth/2, screenHeight/2, player_tile, 'The Hero', libtcod.white, 0, 0, 0, False, blocks=True, fighter=fighter_component)
objects = [player]
makeMap()

fovMap = libtcod.map_new(dungeonWidth, dungeonHeight)
for y in range(dungeonHeight):
    for x in range(dungeonWidth):
        libtcod.map_set_properties(fovMap, x, y, not dungeon[x][y].block_sight, not dungeon[x][y].blocked)
        
fovRecompute = True
game_state = 'playing'

allMessages = []
message('Welcome! This is a sample printed message.', libtcod.green)

inventory = []

mouse = libtcod.Mouse()
key = libtcod.Key()

prevTime = time.time()
cantAttack = False

while not libtcod.console_is_window_closed():
    libtcod.sys_check_for_event(libtcod.EVENT_KEY_PRESS|libtcod.EVENT_MOUSE,key,mouse)
    renderAll()
    libtcod.console_flush()
    
    for object in objects:
        object.clear()
        
    if handleKeys() == 'exit': #escape key pressed
        break
    
    if game_state == 'playing':
        for object in objects:
            if object.ai:
                if object.wait > 0:
                    object.wait = object.wait-1
                else:
                    object.ai.take_turn()
        